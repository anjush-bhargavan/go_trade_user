// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_UserSignup_FullMethodName                = "/pb.UserService/UserSignup"
	UserService_VerfiyUser_FullMethodName                = "/pb.UserService/VerfiyUser"
	UserService_UserLogin_FullMethodName                 = "/pb.UserService/UserLogin"
	UserService_ViewProfile_FullMethodName               = "/pb.UserService/ViewProfile"
	UserService_EditProfile_FullMethodName               = "/pb.UserService/EditProfile"
	UserService_ChangePassword_FullMethodName            = "/pb.UserService/ChangePassword"
	UserService_BlockUser_FullMethodName                 = "/pb.UserService/BlockUser"
	UserService_AddAddress_FullMethodName                = "/pb.UserService/AddAddress"
	UserService_ViewAllAddress_FullMethodName            = "/pb.UserService/ViewAllAddress"
	UserService_EditAddress_FullMethodName               = "/pb.UserService/EditAddress"
	UserService_RemoveAddress_FullMethodName             = "/pb.UserService/RemoveAddress"
	UserService_AddProduct_FullMethodName                = "/pb.UserService/AddProduct"
	UserService_EditProductUser_FullMethodName           = "/pb.UserService/EditProductUser"
	UserService_RemoveProductUser_FullMethodName         = "/pb.UserService/RemoveProductUser"
	UserService_FindProductByIDUser_FullMethodName       = "/pb.UserService/FindProductByIDUser"
	UserService_FindProductByCategoryUser_FullMethodName = "/pb.UserService/FindProductByCategoryUser"
	UserService_FindAllProductsUser_FullMethodName       = "/pb.UserService/FindAllProductsUser"
	UserService_FindCategory_FullMethodName              = "/pb.UserService/FindCategory"
	UserService_FindCategories_FullMethodName            = "/pb.UserService/FindCategories"
	UserService_AddToWatchlist_FullMethodName            = "/pb.UserService/AddToWatchlist"
	UserService_ViewWatchlist_FullMethodName             = "/pb.UserService/ViewWatchlist"
	UserService_ViewWatchlistUsers_FullMethodName        = "/pb.UserService/ViewWatchlistUsers"
	UserService_AddBid_FullMethodName                    = "/pb.UserService/AddBid"
	UserService_GetBids_FullMethodName                   = "/pb.UserService/GetBids"
	UserService_CreateTransaction_FullMethodName         = "/pb.UserService/CreateTransaction"
	UserService_FindTransactionByUser_FullMethodName     = "/pb.UserService/FindTransactionByUser"
	UserService_FindAllTransactions_FullMethodName       = "/pb.UserService/FindAllTransactions"
	UserService_UserCreatePayment_FullMethodName         = "/pb.UserService/UserCreatePayment"
	UserService_UserPaymentSuccess_FullMethodName        = "/pb.UserService/UserPaymentSuccess"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserSignup(ctx context.Context, in *Signup, opts ...grpc.CallOption) (*Response, error)
	VerfiyUser(ctx context.Context, in *OTP, opts ...grpc.CallOption) (*Response, error)
	UserLogin(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Response, error)
	ViewProfile(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Profile, error)
	EditProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Profile, error)
	ChangePassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Response, error)
	BlockUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error)
	AddAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error)
	ViewAllAddress(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*AddressList, error)
	EditAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	RemoveAddress(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*Response, error)
	AddProduct(ctx context.Context, in *UserProduct, opts ...grpc.CallOption) (*Response, error)
	EditProductUser(ctx context.Context, in *UserProduct, opts ...grpc.CallOption) (*UserProduct, error)
	RemoveProductUser(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*Response, error)
	FindProductByIDUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserProduct, error)
	FindProductByCategoryUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserProductList, error)
	FindAllProductsUser(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*UserProductList, error)
	FindCategory(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserCategory, error)
	FindCategories(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*UserCategoryList, error)
	AddToWatchlist(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*Response, error)
	ViewWatchlist(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserCategoryList, error)
	ViewWatchlistUsers(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserList, error)
	AddBid(ctx context.Context, in *UserBid, opts ...grpc.CallOption) (*Response, error)
	GetBids(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserBidList, error)
	CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error)
	FindTransactionByUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TransactionList, error)
	FindAllTransactions(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*TransactionList, error)
	UserCreatePayment(ctx context.Context, in *UserBid, opts ...grpc.CallOption) (*UserPaymentResponse, error)
	UserPaymentSuccess(ctx context.Context, in *UserPayment, opts ...grpc.CallOption) (*Response, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserSignup(ctx context.Context, in *Signup, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_UserSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VerfiyUser(ctx context.Context, in *OTP, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_VerfiyUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ViewProfile(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, UserService_ViewProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, UserService_EditProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *Password, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BlockUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_BlockUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_AddAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ViewAllAddress(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*AddressList, error) {
	out := new(AddressList)
	err := c.cc.Invoke(ctx, UserService_ViewAllAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, UserService_EditAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveAddress(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_RemoveAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddProduct(ctx context.Context, in *UserProduct, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_AddProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditProductUser(ctx context.Context, in *UserProduct, opts ...grpc.CallOption) (*UserProduct, error) {
	out := new(UserProduct)
	err := c.cc.Invoke(ctx, UserService_EditProductUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveProductUser(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_RemoveProductUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindProductByIDUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserProduct, error) {
	out := new(UserProduct)
	err := c.cc.Invoke(ctx, UserService_FindProductByIDUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindProductByCategoryUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserProductList, error) {
	out := new(UserProductList)
	err := c.cc.Invoke(ctx, UserService_FindProductByCategoryUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindAllProductsUser(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*UserProductList, error) {
	out := new(UserProductList)
	err := c.cc.Invoke(ctx, UserService_FindAllProductsUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindCategory(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserCategory, error) {
	out := new(UserCategory)
	err := c.cc.Invoke(ctx, UserService_FindCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindCategories(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*UserCategoryList, error) {
	out := new(UserCategoryList)
	err := c.cc.Invoke(ctx, UserService_FindCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddToWatchlist(ctx context.Context, in *IDs, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_AddToWatchlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ViewWatchlist(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserCategoryList, error) {
	out := new(UserCategoryList)
	err := c.cc.Invoke(ctx, UserService_ViewWatchlist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ViewWatchlistUsers(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, UserService_ViewWatchlistUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddBid(ctx context.Context, in *UserBid, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_AddBid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetBids(ctx context.Context, in *ID, opts ...grpc.CallOption) (*UserBidList, error) {
	out := new(UserBidList)
	err := c.cc.Invoke(ctx, UserService_GetBids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_CreateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindTransactionByUser(ctx context.Context, in *ID, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, UserService_FindTransactionByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindAllTransactions(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, UserService_FindAllTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserCreatePayment(ctx context.Context, in *UserBid, opts ...grpc.CallOption) (*UserPaymentResponse, error) {
	out := new(UserPaymentResponse)
	err := c.cc.Invoke(ctx, UserService_UserCreatePayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserPaymentSuccess(ctx context.Context, in *UserPayment, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, UserService_UserPaymentSuccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	UserSignup(context.Context, *Signup) (*Response, error)
	VerfiyUser(context.Context, *OTP) (*Response, error)
	UserLogin(context.Context, *Login) (*Response, error)
	ViewProfile(context.Context, *ID) (*Profile, error)
	EditProfile(context.Context, *Profile) (*Profile, error)
	ChangePassword(context.Context, *Password) (*Response, error)
	BlockUser(context.Context, *ID) (*Response, error)
	AddAddress(context.Context, *Address) (*Response, error)
	ViewAllAddress(context.Context, *NoParam) (*AddressList, error)
	EditAddress(context.Context, *Address) (*Address, error)
	RemoveAddress(context.Context, *IDs) (*Response, error)
	AddProduct(context.Context, *UserProduct) (*Response, error)
	EditProductUser(context.Context, *UserProduct) (*UserProduct, error)
	RemoveProductUser(context.Context, *IDs) (*Response, error)
	FindProductByIDUser(context.Context, *ID) (*UserProduct, error)
	FindProductByCategoryUser(context.Context, *ID) (*UserProductList, error)
	FindAllProductsUser(context.Context, *NoParam) (*UserProductList, error)
	FindCategory(context.Context, *ID) (*UserCategory, error)
	FindCategories(context.Context, *NoParam) (*UserCategoryList, error)
	AddToWatchlist(context.Context, *IDs) (*Response, error)
	ViewWatchlist(context.Context, *ID) (*UserCategoryList, error)
	ViewWatchlistUsers(context.Context, *ID) (*UserList, error)
	AddBid(context.Context, *UserBid) (*Response, error)
	GetBids(context.Context, *ID) (*UserBidList, error)
	CreateTransaction(context.Context, *Transaction) (*Response, error)
	FindTransactionByUser(context.Context, *ID) (*TransactionList, error)
	FindAllTransactions(context.Context, *NoParam) (*TransactionList, error)
	UserCreatePayment(context.Context, *UserBid) (*UserPaymentResponse, error)
	UserPaymentSuccess(context.Context, *UserPayment) (*Response, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserSignup(context.Context, *Signup) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignup not implemented")
}
func (UnimplementedUserServiceServer) VerfiyUser(context.Context, *OTP) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerfiyUser not implemented")
}
func (UnimplementedUserServiceServer) UserLogin(context.Context, *Login) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) ViewProfile(context.Context, *ID) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewProfile not implemented")
}
func (UnimplementedUserServiceServer) EditProfile(context.Context, *Profile) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProfile not implemented")
}
func (UnimplementedUserServiceServer) ChangePassword(context.Context, *Password) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServiceServer) BlockUser(context.Context, *ID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (UnimplementedUserServiceServer) AddAddress(context.Context, *Address) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedUserServiceServer) ViewAllAddress(context.Context, *NoParam) (*AddressList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAllAddress not implemented")
}
func (UnimplementedUserServiceServer) EditAddress(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAddress not implemented")
}
func (UnimplementedUserServiceServer) RemoveAddress(context.Context, *IDs) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAddress not implemented")
}
func (UnimplementedUserServiceServer) AddProduct(context.Context, *UserProduct) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedUserServiceServer) EditProductUser(context.Context, *UserProduct) (*UserProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProductUser not implemented")
}
func (UnimplementedUserServiceServer) RemoveProductUser(context.Context, *IDs) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductUser not implemented")
}
func (UnimplementedUserServiceServer) FindProductByIDUser(context.Context, *ID) (*UserProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProductByIDUser not implemented")
}
func (UnimplementedUserServiceServer) FindProductByCategoryUser(context.Context, *ID) (*UserProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProductByCategoryUser not implemented")
}
func (UnimplementedUserServiceServer) FindAllProductsUser(context.Context, *NoParam) (*UserProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllProductsUser not implemented")
}
func (UnimplementedUserServiceServer) FindCategory(context.Context, *ID) (*UserCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCategory not implemented")
}
func (UnimplementedUserServiceServer) FindCategories(context.Context, *NoParam) (*UserCategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCategories not implemented")
}
func (UnimplementedUserServiceServer) AddToWatchlist(context.Context, *IDs) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWatchlist not implemented")
}
func (UnimplementedUserServiceServer) ViewWatchlist(context.Context, *ID) (*UserCategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWatchlist not implemented")
}
func (UnimplementedUserServiceServer) ViewWatchlistUsers(context.Context, *ID) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWatchlistUsers not implemented")
}
func (UnimplementedUserServiceServer) AddBid(context.Context, *UserBid) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBid not implemented")
}
func (UnimplementedUserServiceServer) GetBids(context.Context, *ID) (*UserBidList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBids not implemented")
}
func (UnimplementedUserServiceServer) CreateTransaction(context.Context, *Transaction) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedUserServiceServer) FindTransactionByUser(context.Context, *ID) (*TransactionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTransactionByUser not implemented")
}
func (UnimplementedUserServiceServer) FindAllTransactions(context.Context, *NoParam) (*TransactionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllTransactions not implemented")
}
func (UnimplementedUserServiceServer) UserCreatePayment(context.Context, *UserBid) (*UserPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreatePayment not implemented")
}
func (UnimplementedUserServiceServer) UserPaymentSuccess(context.Context, *UserPayment) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPaymentSuccess not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Signup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserSignup(ctx, req.(*Signup))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VerfiyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VerfiyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_VerfiyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VerfiyUser(ctx, req.(*OTP))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ViewProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ViewProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ViewProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ViewProfile(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EditProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EditProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_EditProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EditProfile(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Password)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*Password))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BlockUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BlockUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ViewAllAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ViewAllAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ViewAllAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ViewAllAddress(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EditAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EditAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_EditAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EditAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveAddress(ctx, req.(*IDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddProduct(ctx, req.(*UserProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EditProductUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EditProductUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_EditProductUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EditProductUser(ctx, req.(*UserProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveProductUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveProductUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveProductUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveProductUser(ctx, req.(*IDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindProductByIDUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindProductByIDUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindProductByIDUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindProductByIDUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindProductByCategoryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindProductByCategoryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindProductByCategoryUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindProductByCategoryUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindAllProductsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindAllProductsUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindAllProductsUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindAllProductsUser(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindCategory(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindCategories(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddToWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddToWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddToWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddToWatchlist(ctx, req.(*IDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ViewWatchlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ViewWatchlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ViewWatchlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ViewWatchlist(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ViewWatchlistUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ViewWatchlistUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ViewWatchlistUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ViewWatchlistUsers(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddBid(ctx, req.(*UserBid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetBids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetBids(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindTransactionByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindTransactionByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindTransactionByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindTransactionByUser(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindAllTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindAllTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindAllTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindAllTransactions(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserCreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserCreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCreatePayment(ctx, req.(*UserBid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserPaymentSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserPaymentSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserPaymentSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserPaymentSuccess(ctx, req.(*UserPayment))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSignup",
			Handler:    _UserService_UserSignup_Handler,
		},
		{
			MethodName: "VerfiyUser",
			Handler:    _UserService_VerfiyUser_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
		{
			MethodName: "ViewProfile",
			Handler:    _UserService_ViewProfile_Handler,
		},
		{
			MethodName: "EditProfile",
			Handler:    _UserService_EditProfile_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
		{
			MethodName: "BlockUser",
			Handler:    _UserService_BlockUser_Handler,
		},
		{
			MethodName: "AddAddress",
			Handler:    _UserService_AddAddress_Handler,
		},
		{
			MethodName: "ViewAllAddress",
			Handler:    _UserService_ViewAllAddress_Handler,
		},
		{
			MethodName: "EditAddress",
			Handler:    _UserService_EditAddress_Handler,
		},
		{
			MethodName: "RemoveAddress",
			Handler:    _UserService_RemoveAddress_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _UserService_AddProduct_Handler,
		},
		{
			MethodName: "EditProductUser",
			Handler:    _UserService_EditProductUser_Handler,
		},
		{
			MethodName: "RemoveProductUser",
			Handler:    _UserService_RemoveProductUser_Handler,
		},
		{
			MethodName: "FindProductByIDUser",
			Handler:    _UserService_FindProductByIDUser_Handler,
		},
		{
			MethodName: "FindProductByCategoryUser",
			Handler:    _UserService_FindProductByCategoryUser_Handler,
		},
		{
			MethodName: "FindAllProductsUser",
			Handler:    _UserService_FindAllProductsUser_Handler,
		},
		{
			MethodName: "FindCategory",
			Handler:    _UserService_FindCategory_Handler,
		},
		{
			MethodName: "FindCategories",
			Handler:    _UserService_FindCategories_Handler,
		},
		{
			MethodName: "AddToWatchlist",
			Handler:    _UserService_AddToWatchlist_Handler,
		},
		{
			MethodName: "ViewWatchlist",
			Handler:    _UserService_ViewWatchlist_Handler,
		},
		{
			MethodName: "ViewWatchlistUsers",
			Handler:    _UserService_ViewWatchlistUsers_Handler,
		},
		{
			MethodName: "AddBid",
			Handler:    _UserService_AddBid_Handler,
		},
		{
			MethodName: "GetBids",
			Handler:    _UserService_GetBids_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _UserService_CreateTransaction_Handler,
		},
		{
			MethodName: "FindTransactionByUser",
			Handler:    _UserService_FindTransactionByUser_Handler,
		},
		{
			MethodName: "FindAllTransactions",
			Handler:    _UserService_FindAllTransactions_Handler,
		},
		{
			MethodName: "UserCreatePayment",
			Handler:    _UserService_UserCreatePayment_Handler,
		},
		{
			MethodName: "UserPaymentSuccess",
			Handler:    _UserService_UserPaymentSuccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
